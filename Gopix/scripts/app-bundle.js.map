{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","components/gopix.js"],"names":["App","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","GopixCustomElement","eventAggregator","ea","toplay","gopix","reset","count","push","turn","clickPix","pix"],"mappings":";;;;;;;;;;;;;MAAaA,cAAAA,MACX,eAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,cAAf;AACD;;;;;;;;oBCHY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCUCC,YAAAA;;;;;;;;;;AAPhBC,UAAQC,MAAR,CAAe;AACbC,qBAAiB,sBAAYL,KADhB;AAEbM,cAAU;AACRC,wBAAkB;AADV;AAFG,GAAf;;AAOO,WAASL,SAAT,CAAmBM,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYX,KAAhB,EAAuB;AACrBQ,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYX,OAAhB,EAAyB;AACvBO,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCxBed,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC;;;;;;;;;;;;;;;;;;QCEYa,6BAAAA,6BADZ;AAGG,oCAAYC,eAAZ,EAA6B;AAAA;;AACzB,iBAAKC,EAAL,GAAUD,eAAV;AACA,iBAAKE,MAAL,GAAc,OAAd;AACA,iBAAKC,KAAL,GAAa,EAAb;;AAEA,iBAAKC,KAAL,GAAa,YAAW;AACvB,qBAAK,IAAIC,QAAM,CAAf,EAAkBA,QAAM,IAAxB,EAA8BA,OAA9B,EAAsC;AAC/B,yBAAKF,KAAL,CAAWG,IAAX,CAAgB,OAAhB;AACN;AACD,aAJD;AAKA,iBAAKF,KAAL;AACH;;qCAGDG,uBAAM;AACF,gBAAIL,UAAU,OAAd,EAAuB;AACnBA,yBAAS,OAAT;AACH,aAFD,MAEO;AACHA,yBAAS,OAAT;AACH;AACJ;;qCAEDM,6BAASC,KAAI,CAMf","file":"app-bundle.js","sourcesContent":["export class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import { inject, bindable } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class GopixCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.toplay = 'black';\n        this.gopix = [];\n    \t// setup the board\n        this.reset = function() {\n        \tfor (let count=1; count<1089; count++){\n                this.gopix.push('empty');\n        \t}\n        };\n        this.reset();\n    }\n\n    // switch color\n    turn(){\n        if (toplay == 'black') {\n            toplay = 'white';\n        } else {\n            toplay = 'black';\n        }\n    }\n\n    clickPix(pix){\n\t\t// if (($(this).hasClass('white')===false) && ($(this).hasClass('black')===false)) {\n\t\t// \t$(this).addClass(toplay);\n\t\t// \tboard[count]=toplay;\n\t\t// \tturn();\n\t\t// }\n\t};\n    // dislikeIngredient(ingredient, i) {\n    //     ingredient.pref = (ingredient.pref === 1)? 0 : -1;\n    //     this.ea.publish('downPreference', ingredient);\n    // }\n}\n"],"sourceRoot":"../src"}